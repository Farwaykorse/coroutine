# ---------------------------------------------------------------------------
#
#   Author
#     - luncliff@gmail.com
#
# ---------------------------------------------------------------------------
resources:
- repo: self
  fetchDepth: 5

phases:
- phase: Phase_1
  displayName: VisualStudio 2017 Analysis
  condition: succeeded()
  queue:
    name: Hosted VS2017
    demands: 
      - vstest
      - java
    timeoutInMinutes: 10
  steps:
  - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
    displayName: 'Prepare analysis on SonarCloud'
    inputs:
      SonarCloud: 'luncliff-sonarcloud'
      organization: 'luncliff-github'
      projectKey: 'luncliff_coroutine'
      projectName: 'luncliff-coroutine'
      projectVersion: 1.3
      extraProperties: |  
       sonar.login=$(sonarcloud-login-key)
       sonar.sourceEncoding=UTF-8        
       sonar.cpp.std=c++17
       sonar.cfamily.build-wrapper-output=bw-output 
       sonar.cfamily.vscoveragexml.reportsPath=**/*visual-studio.coveragexml
  - powershell: |  
       # Download build-wrapper
       [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
       Invoke-WebRequest -Uri http://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip -OutFile build-wrapper-win.zip;       
       Expand-Archive -Path .\build-wrapper-win.zip -DestinationPath ./ ;
       Copy-Item .\build-wrapper-win-x86\build-wrapper-win-x86-64.exe ./ ;       
       # Set Path to MSBuild
       $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\amd64"
       # Run build-wrapper
       ./build-wrapper-win-x86-64.exe --out-dir ../bw-output MSBuild.exe /t:rebuild  /p:platform="x64" /p:configuration="Debug";
    displayName: 'Download/Run Sonar Build Wrapper'
  - task: VSTest@2
    displayName: 'Visual Studio Test'
    inputs:
      testAssemblyVer2: |  
       **\*vstest*.dll
      codeCoverageEnabled: true
  - powershell: |  
       # Path to Codecoverage.exe
       $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Team Tools\Dynamic Code Coverage Tools"
       # Acquire coverage file and generate temporary coverage file
       $coverage_file = Get-ChildItem -Recurse *.coverage;
       Write-Host $coverage_file
       $temp_coverage_xml_filepath  = "./TestResults/coverage-report.xml"
       CodeCoverage.exe analyze /output:$temp_coverage_xml_filepath $coverage_file
       Tree ./TestResults /F
       # Filter lines with invalid line number 
       #   and Create a new coverage xml
       $final_coverage_xml_filepath = "./TestResults/luncliff-coroutine-visual-studio.coveragexml"
       $xml_lines = Get-Content $temp_coverage_xml_filepath
       foreach($text in $xml_lines){
           if($text -match 15732480){
               continue;
           }
           else {
              Add-Content $final_coverage_xml_filepath $text;
           }
       }
       Tree ./TestResults /F
       # Display information of a new coverage xml
       Get-ChildItem $final_coverage_xml_filepath
       Get-Content   $final_coverage_xml_filepath
    displayName: 'Create XML from coverage'
  - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
    displayName: 'Run Code Analysis'
  - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
    displayName: 'Publish Quality Gate Result'

- phase: Phase_5
  displayName: VisualStudio 2017 Release
  condition: succeeded()
  queue:
    name: Hosted VS2017
    demands: 
      - msbuild
      - vstest
    timeoutInMinutes: 10
  steps:
  - task: MSBuild@1
    displayName: 'Release Build'
    inputs:
      solution: coroutine.sln
      msbuildArchitecture: x64
      platform: x64
      configuration: Release
      createLogFile: true
  - task: VSTest@2
    displayName: 'Visual Studio Test'
    inputs:
      testAssemblyVer2: |  
       **\*vstest*.dll
      codeCoverageEnabled: true

- phase: Phase_4
  displayName: Visual C++ with clang-cl
  condition: succeeded()
  queue:
    name: Hosted VS2017
    demands: cmake
    timeoutInMinutes: 10
  steps:
  - task: gep13.chocolatey-azuredevops.chocolatey-azuredevops.ChocolateyCommand@0
    displayName: 'Chocolatey LLVM'
    inputs:
      command: install
      installPackageId: llvm
  - task: gep13.chocolatey-azuredevops.chocolatey-azuredevops.ChocolateyCommand@0
    displayName: 'Chocolatey Ninja'
    inputs:
      command: install
      installPackageId: ninja
  - powershell: 'New-Item -Name build -ItemType Directory'
    displayName: 'Create build directory'
  - script: |  
       call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64      
       "C:\Program Files\LLVM\bin\clang-cl.exe" --version
       cmake ../ -G Ninja -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DCMAKE_INSTALL_PREFIX=../install 
       ninja install
    workingDirectory: build
    displayName: 'Run CMake and Build'
  - task: CMake@1
    displayName: 'CMake '

- phase: Phase_2
  displayName: MacOS AppleClang
  condition: succeeded()
  queue:
    name: Hosted macOS
    demands: cmake
    timeoutInMinutes: 10
  steps:
  - script: |  
       brew install ninja cmake tree;
       brew info llvm;      
       mkdir -p build;
    displayName: 'Setup environment'
  - task: CMake@1
    displayName: CMake
    inputs:
      cmakeArgs: '../ -G Ninja -DCMAKE_INSTALL_PREFIX=../install'
  - script: 'ninja install'
    workingDirectory: build
    displayName: 'Build/Install with Ninja'
  - script: |  
       ./test/coroutine_test;
    workingDirectory: build
    displayName: 'Run tests'

- phase: Phase_3
  displayName: Ubuntu1604 Clang-6.0
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
    demands: cmake
    timeoutInMinutes: 10
  steps:
  - script: |  
       sudo add-apt-repository ppa:ubuntu-toolchain-r/test
       sudo apt-get update
       sudo apt-get install -y gcc-7 g++-7
       gcc-7 --version
       
       sudo apt-get install -y ninja-build cmake wget tar unzip tree
       sudo apt-get install -y libc++abi-dev clang-6.0 
       
       mkdir -p build;
    displayName: 'Setup environment'
  - task: Bash@3
    displayName: 'Install libc++ 7.0'
    inputs:
      targetType: ./
      filePath: 'scripts/install-libc++.sh'
  - task: CMake@1
    displayName: CMake
    inputs:
      cmakeArgs: '../ -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_COMPILER=clang-6.0 -DCMAKE_C_COMPILER=clang-6.0'
  - script: 'make -j5 install'
    workingDirectory: build
    displayName: 'Build/Install with Makefiles'
  - script: |  
       ./test/coroutine_test;
    workingDirectory: build
    displayName: 'Run tests'

- phase: Phase_6
  displayName: Windows MSVC
  condition: succeeded()
  queue:
    name: Hosted VS2017
    demands: 
      - cmake
      - msbuild
    timeoutInMinutes: 10
  steps:
  - powershell: 'New-Item -Name build -ItemType Directory'
    displayName: 'Create build directory'
  - task: CMake@1
    displayName: 'CMake Visual Studio 15 2017 Win64'
    inputs:
      cmakeArgs: '../ -G "Visual Studio 15 2017 Win64" -DCMAKE_BUILD_TYPE=Debug'
  - task: MSBuild@1
    displayName: 'Build **/*.sln'
    inputs:
      msbuildArchitecture: x64
      platform: x64
      configuration: Debug
