# ---------------------------------------------------------------------------
#
#   Author
#     - luncliff@gmail.com
#   Reference
#     - https://www.appveyor.com/docs/appveyor-yml/
#
# ---------------------------------------------------------------------------
version: 1.2.{build}

shallow_clone: true

notifications:
  - provider: Email
    to:
      - luncliff@gmail.com

image: 
  - Visual Studio 2017
  - Ubuntu1804
  - Ubuntu1604

platform: 
  - x64

configuration:
  - Debug
  - Release

environment:
  matrix:
    - compiler: msvc
    - compiler: clang

matrix:
  exclude:
    - image: Ubuntu1804
      compiler: msvc
    - image: Ubuntu1604
      compiler: msvc
  allow_failures:
    - image: Visual Studio 2017
      compiler: clang

for:
-
  # For MSVC, use Visual Studio solution file
  matrix:
    only:
      - image: Visual Studio 2017
        compiler: msvc
  install:
    - ps: Write-Host $env:PLATFORM $env:CONFIGURATION $env:APPVEYOR_BUILD_FOLDER 
  build:
    parallel: true
    project: coroutine.sln
    verbosity: quiet
  after_build:
    # Rename the variable for build output
    - ps: if( $env:PLATFORM -eq "x86" ){ $env:PLATFORM="Win32"; }
    - ps: tree /F ./$env:PLATFORM
  before_test:
    - ps: $TestDLL= "$env:APPVEYOR_BUILD_FOLDER/$env:PLATFORM/$env:CONFIGURATION/coroutine_vstest.dll"
  test_script:
    - ps: vstest.console.exe $TestDLL /EnableCodeCoverage
-
  # For Clang, use CMake + Ninja + Clang
  # The build step expects cmdlet environment...
  matrix:
    only:
      - image: Visual Studio 2017
        compiler: clang
  install:
    - ps: Write-Host $env:APPVEYOR_BUILD_FOLDER
    - ps: choco install ninja   # Download Ninja with chocolaty package manager
    - ps: choco info    llvm    # LLVM is already installed. So just show the version info
    - ps: cmake --version
    - ps: ninja --version
    - ps: clang --version       # version: 6.0+
    - ps: clang-cl --version    # cl.exe for clang
    # Rename the variable for build output
    - ps: if( $env:PLATFORM -eq "x86" ){ $env:PLATFORM="Win32" }
  before_build:
    - ps: Write-Host $env:PLATFORM $env:CONFIGURATION
  build_script:
    - ps: New-Item -Name build -ItemType Directory
    - ps: Push-Location -Path build
    # - cmd: call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
    - cmd: call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
    - cmd: set CC=clang-cl  # ps: $env:CC  = "clang-cl"
    - cmd: set CXX=clang-cl # ps: $env:CXX = "clang-cl"
    - cmd: cmake ../ -G Ninja -DCMAKE_BUILD_TYPE=%configuration% -DCMAKE_INSTALL_PREFIX=./%platform%/%configuration%
    - cmd: ninja
  after_build:
    - ps: Pop-Location
  test_script:
    - ps: ./build/coroutine_test.exe
-
  matrix:
    only:
      - image: Ubuntu1804
        compiler: clang
      - image: Ubuntu1604
        compiler: clang
  install:
    # install utilities
    - sh: sudo apt-get install -y wget unzip ninja-build cmake gnupg2 tree
    # install GCC and setup libc++
    - sh: sudo apt-get install -y --fix-missing gcc-7 g++-7 libc++abi-dev libc++-dev
    - export CC=gcc-7
    - export CXX=g++-7
    - sh: sudo bash ./scripts/install-libc++.sh
    # install LLVM toolchain
    - sh: wget -O llvm.key https://apt.llvm.org/llvm-snapshot.gpg.key
    - sh: sudo apt-key add ./llvm.key
    - sh: sudo apt update -y
    - sh: sudo apt-get install -y --fix-missing clang-6.0 llvm-6.0 llvm-6.0-tools
    # report version    
    - sh: cmake --version
    - sh: ninja --version
    - sh: clang-6.0 --version
  before_build:
    - sh: uname -a
    - sh: pwd
    - sh: mkdir -p build && pushd build
  build_script:
    - export CC=clang-6.0
    - export CXX=clang-6.0
    - sh: echo "$CC $CXX"
    - sh: cmake ../ -G Ninja -DCMAKE_BUILD_TYPE=$CONFIGURATION -DCMAKE_INSTALL_PREFIX=./install
    - sh: ninja install
  after_build:
    - sh: popd
  test_script:
    - ps: ./build/coroutine_test [messaging]
    - ps: ./build/coroutine_test [thread]
    - ps: ./build/coroutine_test [generic]
